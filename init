#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var prompt = require('prompt');
var spawn = require('child_process').spawn;

if ((process.argv[2] && (['-h', '--help', '/?'].indexOf(process.argv[2]) != -1)) || (process.argv.length == 2)) {
  var help = [
    "JIG project initialization utility",
    "Usage:",
    "./init basic [project-path] \t initialize project in [project path] using 'basic' template",
    "./init --help \t\t\t display this information",
    "./init --info [template-name] \t display information about the specific template"
  ];
  
  console.log(help.join("\n"));
  process.exit();
}

if(process.argv[2] && (process.argv[2] === '--info')) {
  console.log("TODO");
  process.exit();
}

var template = process.argv[2] || 'basic';
var target_dir = process.argv[3] || process.cwd();
var template_base = __dirname + path.sep + 'templates' + path.sep + template;

var variables = {
  'GAME_NAME': 'JIG Game',
  'JS_PATH': 'js',
  'AUTHOR': 'John Doe',
  'JIG_PATH': __dirname
};

var populate = function(str) {
  for(var v in variables) {
    var rv = '%' + v + '%';
    str = str.split(rv).join(variables[v]);
  }
  
  return str;
}

var init_game = function() {
  try {
    fs.accessSync(target_dir, fs.F_OK);
    console.warn('WARNING: Directory <%s> already exists!', target_dir);
  } catch(e) {
    try {
      fs.mkdirSync(target_dir);
    } catch(e) {
      console.err("Couldn't create directory [%s]!", target_dir);
    }
  }

  var dive = function(dir, callback) {
    var dir_filter = function(d) { return d != '.' };
    
    fs.readdir([template_base, dir].join(path.sep), function(error, list) {
      var done_counter = list.length;
      
      if(done_counter == 0) {
        callback.call();
      }
      
      list.forEach(function(item) {
        var absolut_path = [template_base, dir, item].filter(dir_filter).join(path.sep);

        fs.stat(absolut_path, function(err, stat) {
          if (stat.isDirectory()) {
            var dirname = populate([target_dir, dir, item].filter(dir_filter).join(path.sep));
            
            if(!fs.existsSync(dirname)) {
              try {
                fs.mkdirSync(dirname);
                console.log('MKDIR', dirname, '[OK]')
              } catch (e) {
                console.error('MKDIR', dirname, '[FAILED]');
              }
            }
            
            dive(dir + path.sep + item, function() {
              done_counter--;
              
              if(done_counter == 0) {
                callback.call();
              }
            });
          } else {
            fs.readFile(absolut_path, function(err, content) {
              var final = populate(content.toString());
              var writePath = populate([target_dir, dir, item].filter(dir_filter).join(path.sep));

              fs.writeFile(writePath, final, function(err) {
                if (err) {
                  console.error('WRITE', writePath, '[FAILED]');
                } else {
                  console.log('WRITE', writePath, '[OK]');
                }
                
                done_counter--;
                
                if(done_counter == 0) {
                  callback.call();
                }
              })
            });
          }
        });
      });
    });
  };

  dive(".", function() {
    console.log("All files are copied.");
    console.log("Installing bower dependencies...");
    
    var bower = spawn('bower', ['install', '-s'], {cwd: target_dir});
    
    bower.stdout.pipe(process.stdout);
    
    bower.on('close', function(code) {
      if(code == 0) {
        console.log("bower dependencies installed (code %d)", code);
        console.log("Installing node.js dependencies...");
        
        var npm = spawn('npm', ['install'], {cwd: target_dir});
        
        npm.stdout.pipe(process.stdout);
        
        npm.on('close', function(code) {
          if(code == 0) {
            console.log("Your project is ready! 'cd' to the directory of your project and run 'gulp' to start a webserver (code: %d)", code);
          } else {
            console.error("Something gone wrong while installing node.js dependencies...");
          }
        });
      } else {
        console.error('Something gone wrong while installing bower dependencies...');
      }
    });
  });
}

prompt.start();
prompt.get({
  properties: {
    target_dir: {
      description: 'Project path',
      type: 'string',
      default: target_dir
    },
    game_name: {
      description: 'Enter the name of your game',
      type: 'string',
      default: variables['GAME_NAME']
    },
    author_name: {
      description: 'Author',
      type: 'string',
      default: variables['AUTHOR']
    }
  }
}, function(err, result) {
  if (err) {
    throw err;
    return;
  }
  
  if ((result.length) && (result.create[0].toLowerCase() !== 'y')) {
    return;
  }
  
  target_dir = result.target_dir;
  variables['GAME_NAME'] = result.game_name;
  variables['AUTHOR'] = result.author_name;
  
  init_game();
});
